@page "{id}"
@model ViewModel
@{
    ViewData["Title"] = $"Requests for {Model.Id}";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Requests for @Model.Id</h1>
        <a href="/" class="btn btn-secondary">New Hook</a>
    </div>

    @if (Model.Requests.Count == 0)
    {
        <div class="text-center py-5">
            <h3>No requests yet</h3>
            <p>Send a request to <code>@Request.Scheme://@Request.Host/hook/@Model.Id</code> to see logs here.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-dark table-hover">
                <thead>
                    <tr>
                        <th>Timestamp</th>
                        <th>Method</th>
                        <th>IP</th>
                        <th>Headers</th>
                        <th>Body</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var req in Model.Requests.OrderByDescending(r => r.Timestamp))
                    {
                        <tr>
                            <td>@req.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                            <td><span class="badge bg-@req.Method.ToLower()">@req.Method</span></td>
                            <td>@req.IpAddress</td>
                            <td>
                                <details class="headers-details">
                                    <summary>View (@req.Headers.Count headers)</summary>
                                    <ul class="list-unstyled small">
                                        @foreach (var h in req.Headers)
                                        {
                                            <li><strong>@h.Key:</strong> @h.Value</li>
                                        }
                                    </ul>
                                </details>
                            </td>
                            <td>
                                @if (string.IsNullOrEmpty(req.Body))
                                {
                                    <span class="text-muted">No body</span>
                                }
                                else
                                {
                                    <details class="body-details">
                                        <summary>View body (@req.Body.Length chars)</summary>
                                        <pre class="body-pre" data-body="@req.Body">@req.Body</pre>
                                    </details>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="text-center mt-3">
            <button id="refresh" class="btn btn-outline-light">Refresh</button>
        </div>
    }
</div>

<script>
    // Simple auto-refresh every 5s
    setInterval(() => {
        location.reload();
    }, 5000);

    // Basic syntax highlighting for JSON
    document.addEventListener('DOMContentLoaded', () => {
        const pres = document.querySelectorAll('.body-pre');
        pres.forEach(pre => {
            const body = pre.dataset.body;
            try {
                const json = JSON.parse(body);
                pre.textContent = JSON.stringify(json, null, 2);
                pre.classList.add('json-highlight');
            } catch (e) {
                // Not JSON, leave as is
            }
        });
    });
</script>